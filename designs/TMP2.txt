@startuml

skinparam classAttributeIconSize 0

interface gameplay.TimeObserver {
~updateTime(time : int) : void
}

interface gameplay.Timer {
~addTimeObserver(observer : TimerObserver) : void
~removeTimeObserver(observer : TimerObserver) : void
~timeChanged() : void
}

class gameplay.SimpleTimer {
~obs : ArrayList<TimerObserver>
+myTime : int
-sleepT : int
+round : int
+<<create>>+SimpleTimer()
+<<create>>+SimpleTimer(sleep: int)
+addTimeObserver(observer : TimerObserver) : void
+removeTimeObserver(observer : TimerObserver) : void
+timeChanged() : void
+run() : void
+getNumObservers() : int
+getRound() : int
}

class gameplay.Simulator {

}

abstract class state.ActionState <<abstract>> {
#context : AIContext
#e : Environment
#l : LifeForm
+<<create>>ActionState(context : AIContext)
+<<abstract>>executeAction() : void
}

class state.AIContext {
-lf : LifeForm
-e : Environment
-currentState : ActionState
-deadState : DeadState
-hasWeaponState : HasWeaponState
-noWeaponState : NoWeaponState
-outOfAmmoState : OutOfAmmoState
+<<create>> AIContext(lf : LifeForm, e : Environment)
~execute() : void
~getDeadState() : DeadState
+getEnvironment() : Environment
+getHasWeaponState() : HasWeaponState
+getLifeForm() : LifeForm
+getNoWeaponState() : NoWeaponState
+getOutOfAmmoState() : OutOfAmmoState
+setCurrentState(state : ActionState) : void
+updateTime(time : int) : void
}

class state.DeadState {
-hasLf : boolean
-numWeapons : int
-row : int
-col : int
+<<create>>DeadState(context : AIContext)
+executeAction() : void
-getNewCell() : void
}

class state.HasWeaponState {
+<<create>>HasWeaponState(context : AIContext)
+executeAction() : void
-attackTarget() : void
-dead() : void
-search() : void
}

class state.NoWeaponState {
+<<create>>NoWeaponState(context : AIContext)
+executeAction() : void
-acquireWeapon() : void
-dead() : void
-search() : void
}

class state.OutOfAmmoState {
+<<create>>OutOfAmmoState(context : AIContext)
+executeAction() : void
-dead() : void
-reload() : void
}

class lifeform.LifeForm {
-myName : String
#currentLifePoints : int
#maxLifePoints : int
#attackStrength : int
#weapon : Weapon
-row : int
-col : int
#direction : String
#maxSpeed : int
+<<create>>LifeForm(name : String, life : int)
+<<create>>LifeForm(name : String, life : int, attackDmg : int)
+attack(target : LifeForm, distance : int) : void
+dropWeapon() : Weapon
+getAttackStrength() : int
+getCurrentLifePoints() : int
+getName() : String
+hasWeapon() : boolean
+pickUpWeapon(weapon : Weapon) : boolean
+takeHit(damage : int) : void
+setLocation(row : int, col : int)
+getRow() : int
+getCol() : int
+getWeapon() : Weapon
+getMaxLifePoints() : int
+setDirection(newDirection : string)
+getMaxSpeed() : int
+setRandomDirection() : void
+setMaxLifePoints() : void
}

class environment.Environment <<singleton>> {
~<<static>>e : Environment
+<<static>>cells : Cell[][]
+focusRow : int
+focusCol : int
-observers : List<EnvironmentObserver>
+addObserver(observer : EnvironmentObserver) : void
-notifyObservers(row : int, col : int, lifeform : LifeForm, weapon1 : Weapon, weapon2 : Weapon) : void
+setLifeForm(row : int, col : int, lf : LifeForm) : void
+addLifeForm(entity : LifeForm, row : int, col : int) : boolean
+addWeapon(weapon : Weapon, row : int, col : int) : boolean
+clearBoard() : void
-<<create>> Environment(row : int, col : int)
+<<static>>getEnvironment(row : int, col : int) : Environment
+getNumCols() : int
+getNumRows() : int
+getWeapons(row : int, col : int) : Weapon[]
+hasWeapon(row : int, col : int) : boolean
+removeWeapon(weapon : Weapon, row : int, col : int) : void
+getLifeForm(row : int, col : int) : LifeForm
+removeLifeForm(row : int, col : int) : void
+getDistance(row1 : int, col1 : int, row2 : int, col2 : int) : double
+getDistance(a : LifeForm, b : LifeForm) : double
+moveLifeForm(entity : LifeForm) : boolean
+getTargetedByLifeForm(lf : LifeForm) : LifeForm
+getRandomCell() : Object[]
}

AIContext ..> TimeObserver
SimpleTimer ..> Timer
Simulator o--> SimpleTimer
Simulator o-[thickness=2]-> AIContext : n
Simulator o--> Environment
AIContext o--> ActionState : m
ActionState o--> AIContext
AIContext o--> LifeForm
ActionState o--> LifeForm
ActionState o--> Environment
DeadState --> ActionState
HasWeaponState --> ActionState
NoWeaponState --> ActionState
OutOfAmmoState --> ActionState
Simulator -[hidden]-> AIContext
TimeObserver -[hidden]-> AIContext
AIContext -[hidden]-> Simulator
AIContext -[hidden]-> Simulator
AIContext -[hidden]-> Simulator
AIContext -[hidden]-> Simulator

@enduml
